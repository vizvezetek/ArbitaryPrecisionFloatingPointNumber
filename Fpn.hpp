/**
 * \class Fpn
 * 
 * \note This is an arbitary precision floating point arithmetic
 * 
 * \author kope
 * 
 * \version 6.9
 * 
 * \date 2020/10/25 22:07
*/

#ifndef FPN_HPP
#define FPN_HPP

#include <iostream>
#include <string>
#include <vector>
#include <tuple> //multiple return values
#include <algorithm> 
#include <sstream>

#define TAYLOR_PREC 50      ///< the precision of the taylor sum
#define fixedPrec 100      ///< the default precision of a number if its not overridden

#define sPI "3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263"
#define doublesPi "6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964296173026564613294187689219101164463450718816256962234900568205403877042211119289245897909860763928857621951331866892256951296467573566330542403818291297133846920697220908653296426787214520498282547449174013212631176349763041841925658508183430728735785180720022661061097640933042768293903883023218866114540731519183906184372234763865223586210237096148924759925499134703771505449782455876366023898259667346724881313286172042789892790449474381404359721887405541078434352586353504769349636935338810264001136254290526"
#define NsPI "-3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263"
#define NdoublesPi "-6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964296173026564613294187689219101164463450718816256962234900568205403877042211119289245897909860763928857621951331866892256951296467573566330542403818291297133846920697220908653296426787214520498282547449174013212631176349763041841925658508183430728735785180720022661061097640933042768293903883023218866114540731519183906184372234763865223586210237096148924759925499134703771505449782455876366023898259667346724881313286172042789892790449474381404359721887405541078434352586353504769349636935338810264001136254290526"
#define halfsPi "1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745649168366812203283215430106974731976123685953510899304718513852696085881465883761923374092338347025660002840635726315"
#define NhalfsPi "-1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585339910740432566411533235469223047752911158626797040642405587251420513509692605527798223114744774651909822144054878329667230642378241168933915826356009545728242834617301743052271633241066968036301245706368622935033031577940874407604604814146270458576821839462951800056652652744102332606920734759707558047165286351828797959765460930586909663058965525592740372311899813747836759428763624456139690915059745649168366812203283215430106974731976123685953510899304718513852696085881465883761923374092338347025660002840635726315"

// #define EPS 1e-13

using namespace std;

class Fpn{

private:

    // data members ****************************************
    char sign;      ///< the sign of the number positive (+) or negative (-)
    string number;      ///< the number in string format. ex: "123.4567"
    string intPart;      ///< the integer part of the number. ex: "123"
    string fractPart;      ///< the faction part of the number. ex: "4567"
    // int intPrecision;      ///< the precision of the integer part. ex: "3"
    int fractPrecision;      ///< precision of the fraction part. Default 100. If it's set in the construct, then not 100. :D 

    // private functions ************************************
    string addIntAsString(string s1, string s2);
    string diffIntsAsString(string str1, string str2);
    string multiplyIntAsString(string num1, string num2);
    string divideIntsAsString(string number, string divisor, int precision);

    tuple<string, string>  modIntsAsString(string num1, string num2 );
    
    bool isSmallerInt(string str1, string str2);
    bool isSmallerFloat(Fpn f1, Fpn f2);
    Fpn extractFpns(Fpn f1, Fpn f2);
    Fpn addFpns(Fpn f1, Fpn f2);

    static Fpn sinTaylorSum(Fpn x);
    static Fpn cosTaylorSum(Fpn x);

    static Fpn sSquare(Fpn n, Fpn i, Fpn j) ;

    string removeZerosTheBeginOfTheString(string s);
    string removeZerosTheEndOfTheString(string s);

    friend std::ostream& operator<<(std::ostream&, const Fpn&);
    
    
public:
    //constructors *****************************************
    // Fpn(char sign_, const string number_, int fractPrecision_ );
    Fpn(const string number_, const int fractPrecision_);
    Fpn(const string number_);
    Fpn(const Fpn& obj);
    Fpn(Fpn& obj);
    Fpn();

    //destructor *******************************************
    ~Fpn(){}

    //getter, setter, toString *****************************
    const char getSign();
    const string getNumber();
    const string getIntPart();
    const string getFractPart();
    const int getIntPrecision();
    const int getFractPrecision();

    void setSign(const char sign_);
    void setNumber(const string number_);
    void setIntPart(const string intPart_);
    void setFractPart(const string fractPart_);
    void setFractPrecision(const int fractPrecision_);

    string toString();


    //operators ********************************************
    // Fpn operator = (Fpn const &obj);
    Fpn& operator = (const Fpn& obj);

    // Fpn operator + (Fpn &obj);
    // Fpn operator - (Fpn obj);
    // Fpn operator * (Fpn &obj);
    Fpn operator / (Fpn &obj);

    Fpn operator + (const Fpn& obj);
    Fpn operator - (const Fpn& obj);
    Fpn operator * (const Fpn& f2);
    Fpn operator / (const Fpn& f2);

    //FPN.math functions
    static Fpn sqrt (Fpn obj);
    Fpn pow (Fpn &obj);
    static Fpn sin (Fpn x);
    static Fpn cos (Fpn x);

    static Fpn abs(Fpn obj);
    static Fpn round(Fpn obj);
    static Fpn fact(Fpn obj);


    // friend bool operator == (Fpn& obj1, Fpn& obj2);
    friend bool operator != (Fpn &obj1, Fpn &obj2);
    friend bool operator < (Fpn &obj1, Fpn &obj2);
    friend bool operator > (Fpn &obj1, Fpn &obj2);
    friend bool operator <= (Fpn &obj1, Fpn &obj2);
    friend bool operator >= (Fpn &obj1, Fpn &obj2);

    bool operator == (const Fpn& obj2) const;
    bool operator != (const Fpn& obj2) const;
    bool operator < (const Fpn& obj2) const;
    bool operator > (const Fpn& obj2) const;
    bool operator <= (const Fpn& obj2) const;
    bool operator >= (const Fpn& obj2) const;




};


#endif // FPN_HPP